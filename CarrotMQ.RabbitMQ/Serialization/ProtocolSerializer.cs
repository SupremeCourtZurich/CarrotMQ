using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using CarrotMQ.Core.Protocol;
using CarrotMQ.Core.Serialization;
using RabbitMQ.Client;

namespace CarrotMQ.RabbitMQ.Serialization;

/// <summary>
/// Provides our implementation for serializing and deserializing CarrotMQ messages into JSON.
/// <remarks>We use the .NET System.Text.Json serializer to avoid clashes with a specific serializer.</remarks>
/// </summary>
public sealed class ProtocolSerializer : IProtocolSerializer
{
    private static readonly JsonSerializerOptions JsonSerializerOptions = new()
    {
        WriteIndented = true,
        DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingDefault
    };

    /// <inheritdoc cref="IProtocolSerializer.Serialize" />
    public string Serialize(CarrotMessage carrotMessage, BasicProperties basicProperties)
    {
        return JsonSerializer.Serialize(carrotMessage, JsonSerializerOptions);
    }

    /// <inheritdoc cref="IProtocolSerializer.Deserialize" />
    public CarrotMessage Deserialize(string json, IReadOnlyBasicProperties basicProperties)
    {
        var carrotMessage = DeserializeInternal(json) ?? throw new CarrotSerializerException(json, typeof(CarrotMessage));

        MapBasicPropertiesToCarrotMessage(basicProperties, carrotMessage);

        return carrotMessage;
    }

    private static void MapBasicPropertiesToCarrotMessage(
        IReadOnlyBasicProperties basicProperties,
        CarrotMessage carrotMessage)
    {
        if (!string.IsNullOrWhiteSpace(basicProperties.ReplyTo))
        {
            // apply reply exchange and routingKey for DirectReply scenario (ReplyTo is generated by RabbitMQ)
            carrotMessage.Header.ReplyExchange = string.Empty;
            carrotMessage.Header.ReplyRoutingKey = basicProperties.ReplyTo ?? string.Empty;
        }

        if (!string.IsNullOrWhiteSpace(basicProperties.CorrelationId)
            && (carrotMessage.Header.CorrelationId is null || carrotMessage.Header.CorrelationId == Guid.Empty))
        {
            carrotMessage.Header.CorrelationId = Guid.Parse(basicProperties.CorrelationId);
        }

        if (!string.IsNullOrWhiteSpace(basicProperties.MessageId) && Guid.Empty.Equals(carrotMessage.Header.MessageId))
        {
            carrotMessage.Header.MessageId = Guid.Parse(basicProperties.MessageId);
        }
    }

    private static CarrotMessage? DeserializeInternal(string json)
    {
        return JsonSerializer.Deserialize<CarrotMessage>(json, JsonSerializerOptions);
    }
}