using System;
using CarrotMQ.Core.Protocol;
using RabbitMQ.Client;

namespace CarrotMQ.RabbitMQ.Serialization;

/// <inheritdoc />
public class BasicPropertiesMapper : IBasicPropertiesMapper
{
    /// <inheritdoc />
    public void MapToMessage(IReadOnlyBasicProperties basicProperties, CarrotMessage carrotMessage)
    {
        if (!string.IsNullOrWhiteSpace(basicProperties.ReplyTo))
        {
            // apply reply exchange and routingKey for DirectReply scenario (ReplyTo is generated by RabbitMQ)
            carrotMessage.Header.ReplyExchange = string.Empty;
            carrotMessage.Header.ReplyRoutingKey = basicProperties.ReplyTo ?? string.Empty;
        }

        if (!string.IsNullOrWhiteSpace(basicProperties.CorrelationId) && (carrotMessage.Header.CorrelationId is null || Guid.Empty.Equals(carrotMessage.Header.CorrelationId)))
        {
            carrotMessage.Header.CorrelationId = Guid.Parse(basicProperties.CorrelationId);
        }

        if (!string.IsNullOrWhiteSpace(basicProperties.MessageId) && Guid.Empty.Equals(carrotMessage.Header.MessageId))
        {
            carrotMessage.Header.MessageId = Guid.Parse(basicProperties.MessageId);
        }
    }

    /// <inheritdoc />
    public BasicProperties CreateBasicProperties(CarrotHeader header)
    {
        var unixTime = DateTimeOffset.Now.ToUnixTimeSeconds();

        var basicProperties = new BasicProperties
        {
            ContentType = "application/json",
            Persistent = header.MessageProperties.Persistent,
            Priority = header.MessageProperties.Priority,
            CorrelationId = header.CorrelationId?.ToString(),
            Expiration = header.MessageProperties.Ttl >= 0 ? header.MessageProperties.Ttl.ToString() : null,
            MessageId = header.MessageId.ToString(),
            Timestamp = new AmqpTimestamp(unixTime),
            Type = nameof(CarrotMessage),
            AppId = header.ServiceInstanceId.ToString()
        };

        return basicProperties;
    }
}