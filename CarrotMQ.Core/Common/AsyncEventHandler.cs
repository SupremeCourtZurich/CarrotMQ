using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace CarrotMQ.Core.Common;

/// <summary>
/// Represents the async methods that will handle an event
/// </summary>
/// <typeparam name="TEventArs">The type of the event data generated by the event.</typeparam>
/// <param name="sender">The source of the event.</param>
/// <param name="e">An object that contains the event data.</param>
public delegate Task AsyncEventHandler<in TEventArs>(object sender, TEventArs e) where TEventArs : EventArgs;

/// <summary>
/// Extension methods for <see cref="AsyncEventHandler{TEventArgs}" />.
/// </summary>
public static class AsyncEventHandlerExtensions
{
    /// <summary>
    /// Get all registered <see cref="AsyncEventHandler{TEventArs}" />. This method allows to call them manually instead of
    /// using <see cref="InvokeAllAsync{TEventArgs}" />
    /// </summary>
    /// <typeparam name="TEventArgs"></typeparam>
    /// <param name="eventHandler"></param>
    public static IEnumerable<AsyncEventHandler<TEventArgs>> GetHandlers<TEventArgs>(this AsyncEventHandler<TEventArgs> eventHandler)
        where TEventArgs : EventArgs
    {
        return eventHandler.GetInvocationList().Cast<AsyncEventHandler<TEventArgs>>();
    }

    /// <summary>
    /// Invoke all registered event handlers.
    /// </summary>
    /// <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
    /// <param name="eventHandler">The <see cref="AsyncEventHandler{TEventArs}" /> producing the event.</param>
    /// <param name="sender">The source of the event.</param>
    /// <param name="e">An object that contains the event data.</param>
    /// <returns>A task that represents the completion of all event handler calls.</returns>
    public static Task InvokeAllAsync<TEventArgs>(
        this AsyncEventHandler<TEventArgs> eventHandler,
        object sender,
        TEventArgs e)
        where TEventArgs : EventArgs
    {
        return Task.WhenAll(
            eventHandler.GetHandlers()
                .Select(handleAsync => handleAsync(sender, e)));
    }
}